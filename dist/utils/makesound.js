let actx=new AudioContext;class Sound{constructor(t,e){this.source=t,this.loadHandler=e,this.actx=actx,this.volumeNode=this.actx.createGain(),this.panNode=this.actx.createStereoPanner(),this.soundNode=null,this.buffer=null,this.loop=null,this.playing=!1,this.panValue=0,this.volumeValue=1,this.startTime=0,this.startOffset=0,this.load()}load(){let t=new XMLHttpRequest;t.open("GET",this.source,!0),t.responseType="arraybuffer",t.addEventListener("load",(()=>{this.actx.decodeAudioData(t.response,(t=>{this.buffer=t,this.hasLoadded=!0,this.loadHandler&&this.loadHandler()}),(t=>{throw new Error("Audio could not be decoded: "+t)}))})),t.send()}play(){this.startTime=this.actx.currentTime,this.soundNode=this.actx.createBufferSource(),this.soundNode.buffer=this.buffer,this.soundNode.connect(this.volumeNode),this.volumeNode.connect(this.panNode),this.panNode.connect(this.actx.destination),this.soundNode.loop=this.loop,this.soundNode.start(this.startTime,this.startOffset%this.buffer.duration),this.playing=!0}pause(){this.playing&&(this.soundNode.stop(this.actx.currentTime),this.startOffset+=this.actx.currentTime-this.startTime,this.playing=!1)}restart(){this.playing&&this.soundNode.stop(this.actx.currentTime),this.startOffset=0,this.play()}playFrom(t){this.playing&&this.soundNode.stop(this.actx.currentTime),this.startOffset=t,this.play()}get volume(){return this.volumeValue}set volume(t){this.volumeNode.gain.value=t,this.volumeValue=t}get pan(){return this.panNode.pan.value}set pan(t){this.panNode.pan.value=t}}function makeSound(t,e){return new Sound(t,e)}export default makeSound;